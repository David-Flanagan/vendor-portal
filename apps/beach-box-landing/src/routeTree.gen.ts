/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WhyBeachBoxRouteImport } from './routes/why-beach-box'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as PartnershipModelsRouteImport } from './routes/partnership-models'
import { Route as PartnersRouteImport } from './routes/partners'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CaseStudiesRouteImport } from './routes/case-studies'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const WhyBeachBoxRoute = WhyBeachBoxRouteImport.update({
  id: '/why-beach-box',
  path: '/why-beach-box',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const PartnershipModelsRoute = PartnershipModelsRouteImport.update({
  id: '/partnership-models',
  path: '/partnership-models',
  getParentRoute: () => rootRouteImport,
} as any)
const PartnersRoute = PartnersRouteImport.update({
  id: '/partners',
  path: '/partners',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CaseStudiesRoute = CaseStudiesRouteImport.update({
  id: '/case-studies',
  path: '/case-studies',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/locations': typeof LocationsRoute
  '/partners': typeof PartnersRoute
  '/partnership-models': typeof PartnershipModelsRoute
  '/pricing': typeof PricingRoute
  '/why-beach-box': typeof WhyBeachBoxRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/locations': typeof LocationsRoute
  '/partners': typeof PartnersRoute
  '/partnership-models': typeof PartnershipModelsRoute
  '/pricing': typeof PricingRoute
  '/why-beach-box': typeof WhyBeachBoxRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/features': typeof FeaturesRoute
  '/locations': typeof LocationsRoute
  '/partners': typeof PartnersRoute
  '/partnership-models': typeof PartnershipModelsRoute
  '/pricing': typeof PricingRoute
  '/why-beach-box': typeof WhyBeachBoxRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/case-studies'
    | '/contact'
    | '/features'
    | '/locations'
    | '/partners'
    | '/partnership-models'
    | '/pricing'
    | '/why-beach-box'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/case-studies'
    | '/contact'
    | '/features'
    | '/locations'
    | '/partners'
    | '/partnership-models'
    | '/pricing'
    | '/why-beach-box'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/case-studies'
    | '/contact'
    | '/features'
    | '/locations'
    | '/partners'
    | '/partnership-models'
    | '/pricing'
    | '/why-beach-box'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CaseStudiesRoute: typeof CaseStudiesRoute
  ContactRoute: typeof ContactRoute
  FeaturesRoute: typeof FeaturesRoute
  LocationsRoute: typeof LocationsRoute
  PartnersRoute: typeof PartnersRoute
  PartnershipModelsRoute: typeof PartnershipModelsRoute
  PricingRoute: typeof PricingRoute
  WhyBeachBoxRoute: typeof WhyBeachBoxRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/why-beach-box': {
      id: '/why-beach-box'
      path: '/why-beach-box'
      fullPath: '/why-beach-box'
      preLoaderRoute: typeof WhyBeachBoxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/partnership-models': {
      id: '/partnership-models'
      path: '/partnership-models'
      fullPath: '/partnership-models'
      preLoaderRoute: typeof PartnershipModelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/partners': {
      id: '/partners'
      path: '/partners'
      fullPath: '/partners'
      preLoaderRoute: typeof PartnersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/case-studies': {
      id: '/case-studies'
      path: '/case-studies'
      fullPath: '/case-studies'
      preLoaderRoute: typeof CaseStudiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CaseStudiesRoute: CaseStudiesRoute,
  ContactRoute: ContactRoute,
  FeaturesRoute: FeaturesRoute,
  LocationsRoute: LocationsRoute,
  PartnersRoute: PartnersRoute,
  PartnershipModelsRoute: PartnershipModelsRoute,
  PricingRoute: PricingRoute,
  WhyBeachBoxRoute: WhyBeachBoxRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
